pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(SITUATION_JURIDIQUE), y=EXPO, fill=as.factor(SITUATION_JURIDIQUE))) +
geom_bar(stat='identity') +
ggtitle('Exposition par SITUATION_JURIDIQUE')+
xlab('SITUATION_JURIDIQUE') +
ylab('exposition') +
labs(fill = 'SITUATION_JURIDIQUE')
expo_tot <- sum(expo_train$EXPO)
dt <-expo_train %>%
group_by(NIVEAU_JURIDIQUE) %>%
summarise(nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  expo_tot )
formattable(dt,
align=c('l','r','r', 'r'),
list(
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(NIVEAU_JURIDIQUE), y=EXPO, fill=as.factor(NIVEAU_JURIDIQUE))) +
geom_bar(stat='identity') +
ggtitle('Exposition par NIVEAU_JURIDIQUE')+
xlab('NIVEAU_JURIDIQUE') +
ylab('exposition') +
labs(fill = 'NIVEAU_JURIDIQUE')
expo_tot <- sum(expo_train$EXPO)
dt <-expo_train %>%
group_by(VALEUR_DES_BIENS) %>%
summarise(nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  expo_tot )
formattable(dt,
align=c('l','r','r', 'r'),
list(
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(VALEUR_DES_BIENS), y=EXPO, fill=as.factor(VALEUR_DES_BIENS))) +
geom_bar(stat='identity') +
ggtitle('Exposition par VALEUR_DES_BIENS')+
xlab('VALEUR_DES_BIENS') +
ylab('exposition') +
labs(fill = 'VALEUR_DES_BIENS')
expo_tot <- sum(expo_train$EXPO)
dt <-expo_train %>%
group_by(OBJETS_DE_VALEUR) %>%
summarise(nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  expo_tot )
formattable(dt,
align=c('l','r','r', 'r'),
list(
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(OBJETS_DE_VALEUR), y=EXPO, fill=as.factor(OBJETS_DE_VALEUR))) +
geom_bar(stat='identity') +
ggtitle('Exposition par OBJETS_DE_VALEUR')+
xlab('OBJETS_DE_VALEUR') +
ylab('exposition') +
labs(fill = 'OBJETS_DE_VALEUR')
expo_tot <- sum(expo_train$EXPO)
dt <-expo_train %>%
group_by(ZONIER) %>%
summarise(nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  expo_tot )
region <- gsub('[0-9]', '', dt$ZONIER)
formattable(dt,
align=c('l','r','r', 'r'),
list(
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(ZONIER), y=EXPO, fill=as.factor(region))) +
geom_bar(stat='identity') +
ggtitle('Exposition par ZONIER')+
xlab('ZONIER') +
ylab('exposition') +
labs(fill = 'ZONIER') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
expo_tot <- sum(expo_train$EXPO)
dt <-expo_train %>%
group_by(NBSIN_TYPE1_AN1) %>%
summarise(nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  expo_tot )
formattable(dt,
align=c('l','r','r', 'r'),
list(
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(NBSIN_TYPE1_AN1), y=EXPO, fill=as.factor(NBSIN_TYPE1_AN1))) +
geom_bar(stat='identity') +
ggtitle('Exposition par NBSIN_TYPE1_AN1')+
xlab('NBSIN_TYPE1_AN1') +
ylab('exposition') +
labs(fill = 'NBSIN_TYPE1_AN1')
expo_tot <- sum(expo_train$EXPO)
dt <-expo_train %>%
group_by(NBSIN_TYPE1_AN2) %>%
summarise(nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  expo_tot )
formattable(dt,
align=c('l','r','r', 'r'),
list(
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(NBSIN_TYPE1_AN2), y=EXPO, fill=as.factor(NBSIN_TYPE1_AN2))) +
geom_bar(stat='identity') +
ggtitle('Exposition par NBSIN_TYPE1_AN2')+
xlab('NBSIN_TYPE1_AN2') +
ylab('exposition') +
labs(fill = 'NBSIN_TYPE1_AN2')
expo_tot <- sum(expo_train$EXPO)
dt <-expo_train %>%
group_by(NBSIN_TYPE1_AN3) %>%
summarise(nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  expo_tot )
formattable(dt,
align=c('l','r','r', 'r'),
list(
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(NBSIN_TYPE1_AN3), y=EXPO, fill=as.factor(NBSIN_TYPE1_AN3))) +
geom_bar(stat='identity') +
ggtitle('Exposition par NBSIN_TYPE1_AN3')+
xlab('NBSIN_TYPE1_AN3') +
ylab('exposition') +
labs(fill = 'NBSIN_TYPE1_AN3')
expo_tot <- sum(expo_train$EXPO)
dt <-expo_train %>%
group_by(NBSIN_TYPE2_AN1) %>%
summarise(nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  expo_tot )
formattable(dt,
align=c('l','r','r', 'r'),
list(
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(NBSIN_TYPE2_AN1), y=EXPO, fill=as.factor(NBSIN_TYPE2_AN1))) +
geom_bar(stat='identity') +
ggtitle('Exposition par NBSIN_TYPE2_AN1')+
xlab('NBSIN_TYPE2_AN1') +
ylab('exposition') +
labs(fill = 'NBSIN_TYPE2_AN1')
expo_tot <- sum(expo_train$EXPO)
dt <-expo_train %>%
group_by(NBSIN_TYPE2_AN2) %>%
summarise(nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  expo_tot )
formattable(dt,
align=c('l','r','r', 'r'),
list(
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(NBSIN_TYPE2_AN2), y=EXPO, fill=as.factor(NBSIN_TYPE2_AN2))) +
geom_bar(stat='identity') +
ggtitle('Exposition par NBSIN_TYPE2_AN2')+
xlab('NBSIN_TYPE2_AN2') +
ylab('exposition') +
labs(fill = 'NBSIN_TYPE2_AN2')
expo_tot <- sum(expo_train$EXPO)
dt <-expo_train %>%
group_by(NBSIN_TYPE2_AN3) %>%
summarise(nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  expo_tot )
formattable(dt,
align=c('l','r','r', 'r'),
list(
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(NBSIN_TYPE2_AN3), y=EXPO, fill=as.factor(NBSIN_TYPE2_AN3))) +
geom_bar(stat='identity') +
ggtitle('Exposition par NBSIN_TYPE2_AN3')+
xlab('NBSIN_TYPE2_AN3') +
ylab('exposition') +
labs(fill = 'NBSIN_TYPE2_AN3')
expo_tot <- sum(expo_train$EXPO)
dt <-expo_train %>%
group_by(ANNEE) %>%
summarise(nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  expo_tot )
formattable(dt,
align=c('l','r','r', 'r'),
list(
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
dt %>%
ggplot( aes(x=as.factor(ANNEE), y=EXPO, fill=as.factor(ANNEE))) +
geom_bar(stat='identity') +
ggtitle('Exposition par ANNEE')+
xlab('ANNEE') +
ylab('exposition') +
labs(fill = 'ANNEE')
sin_train = read.table(file = here('data', 'raw', 'sin_train.csv'), header=T, sep=';', dec=',', encoding = 'UTF-8', stringsAsFactors = F)
datatable(head(sin_train))
str(sin_train)
dt <-sin_train %>%
group_by(NB) %>%
summarise(nb_lignes = n())
formattable(dt,
align=c('l','r'),
list(
nb_lignes= accounting
)
)
dt %>%
ggplot( aes(x=as.factor(NB), y=nb_lignes, fill=as.factor(NB))) +
geom_bar(stat='identity') +
ggtitle('Distribution NB')+
xlab('NB') +
ylab('nombre de lignes') +
labs(fill = 'NB')
mrh <- expo_train %>%
left_join(sin_train, by =c('id','ANNEE')) %>%
replace_na(list('NB'=0, 'COUT'=0))
set.seed(42)
trainIndex<- createDataPartition(mrh$NB>=0, p=.7, list=FALSE, time=1)
mrh_train<-mrh[trainIndex,]
mrh_test<-mrh[ -trainIndex,]
valIndex<- createDataPartition(mrh_test$NB>=0, p=.66, list=FALSE, time=1)
mrh_val<-mrh_test[ valIndex,]
mrh_test<-mrh_test[ -valIndex,]
tx <- sum(mrh_train$NB*mrh_train$EXPO)/sum(mrh_train$EXPO)
print(paste0('taux de sinistre moyen annuel : ', round(tx * 100,2), '%'))
df = mrh_train
feature = 'FORMULE'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'TYPE_RESIDENCE'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'TYPE_HABITATION'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'NB_PIECES'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'SITUATION_JURIDIQUE'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'NIVEAU_JURIDIQUE'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'VALEUR_DES_BIENS'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'OBJETS_DE_VALEUR'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'ZONIER'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
test <- df %>% mutate(REGION = substr(ZONIER, 1,1))
feature = 'REGION'
res<-resume(test, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'NBSIN_TYPE1_AN1'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'NBSIN_TYPE1_AN3'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'NBSIN_TYPE2_AN1'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'NBSIN_TYPE2_AN2'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'NBSIN_TYPE2_AN3'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'ANNEE'
res<-resume(df, feature)
res$table
res$fig
preprocess<- function(dt) {
res <- dt %>%
mutate(
NB_PIECES = ifelse(is.na(NB_PIECES), 2, NB_PIECES), #2 est le mode de NB_PIECES
NBSIN_TYPE1_AN1 = ifelse(NBSIN_TYPE1_AN1==0,0,1), #On regroupe les modalités non stables dans le temps
NBSIN_TYPE1_AN3 = ifelse(NBSIN_TYPE1_AN3==0,0,1), #On regroupe les modalités non stables dans le temps
REGION =  gsub('[0-9]', '', ZONIER) #création de région
) %>%
select(-c('X', 'TYPE_HABITATION', 'NIVEAU_JURIDIQUE', 'NBSIN_TYPE1_AN2', 'NBSIN_TYPE2_AN1', 'NBSIN_TYPE2_AN2', 'NBSIN_TYPE2_AN3'  )) %>% # On supprime les variables sans lien stable dans le temps
relocate('id', 'EXPO', 'FORMULE', 'TYPE_RESIDENCE', 'SITUATION_JURIDIQUE', 'OBJETS_DE_VALEUR', 'VALEUR_DES_BIENS', 'NB_PIECES', 'ZONIER', 'REGION', 'NBSIN_TYPE1_AN1', 'NBSIN_TYPE1_AN3', 'ANNEE', 'NB', 'COUT' )
return(res)
}
df_train <- preprocess(mrh_train)
df_val <- preprocess(mrh_val)
df_test <- preprocess(mrh_test)
X_train <- df_train %>% select(-c('id', 'EXPO', 'NB', 'COUT'))
# Initialize empty matrix to store coefficients
empty_m <- matrix(ncol = length(X_train),
nrow = length(X_train),
dimnames = list(names(X_train),
names(X_train)))
# Function that accepts matrix for coefficients and data and returns a correlation matrix
calculate_cramer <- function(m, df) {
for (r in seq(nrow(m))){
for (c in seq(ncol(m))){
m[[r, c]] <- lsr::cramersV(X_train[[r]], X_train[[c]])
}
}
return(m)
}
cor_matrix <- calculate_cramer(empty_m ,X_train)
corrplot(cor_matrix)
h2o.init(nthreads = -1)
reg_bst_100 = h2o.gbm(y = 'NB', x = names(df_train),
distribution = "poisson",
offset_column = "EXPO",
training_frame = as.h2o(df_train),
validation_frame = as.h2o(df_val),
ntrees = 100,
nfolds = 5,
seed = 1)
plot(reg_bst_100)
reg0 = glm(NB~1+offset(log(EXPO)),family=poisson,data=df_train)
summary(reg0)
plot(reg0)
fit_glm <- glm(NB ~ FORMULE + TYPE_RESIDENCE + SITUATION_JURIDIQUE + OBJETS_DE_VALEUR + as.factor(VALEUR_DES_BIENS) + as.factor(NB_PIECES) + REGION + as.factor(NBSIN_TYPE1_AN1) + as.factor(NBSIN_TYPE1_AN3) + as.factor(ANNEE),
data=df_train, offset=log(EXPO), family=quasipoisson())
summary(fit_glm)
plot(fit_glm)
x <- c('FORMULE', 'TYPE_RESIDENCE', 'SITUATION_JURIDIQUE','OBJETS_DE_VALEUR', 'VALEUR_DES_BIENS', 'NB_PIECES', 'REGION', 'NBSIN_TYPE1_AN1', 'NBSIN_TYPE1_AN3', 'ANNEE')
y <- 'NB'
w <- 'EXPO'
# Input maker
prep_xgb <- function(dat, x) {
data.matrix(dat[, x, drop = FALSE])
}
# Data interface to XGBoost
dtrain <- xgb.DMatrix(
prep_xgb(df_train, x),
label = df_train[[y]],
weight = df_train[[w]]
)
# Parameters chosen by 5-fold grouped CV
params_freq <- list(
learning_rate = 0.2,
max_depth = 5,
alpha = 3,
lambda = 0.5,
max_delta_step = 2,
min_split_loss = 0,
colsample_bytree = 1,
subsample = 0.9
)
# Fit
set.seed(1)
fit_xgb <- xgb.train(
params_freq,
data = dtrain,
nrounds = 580,
objective = "count:poisson",
watchlist = list(train = dtrain),
print_every_n = 100
)
# Save and load model
xgb.save(fit_xgb, "xgb.model")
fit_xgb <- xgb.load("xgb.model")
fl_glm <- flashlight(
model = fit_glm, label = "GLM",
predict_function = function(fit, X) predict(fit, X, type = "response")
)
fl_xgb <- flashlight(
model = fit_xgb, label = "XGBoost",
predict_function = function(fit, X) predict(fit, prep_xgb(X, x))
)
# Combine them and add common elements like reference data
metrics <- list(`Average deviance` = deviance_poisson,
`Relative deviance reduction` = r_squared_poisson)
fls <- multiflashlight(list(fl_glm, fl_xgb), data = df_val,
y = y, w = w, metrics = metrics)
# Version on canonical scale
fls_log <- multiflashlight(fls, linkinv = log)
fillc <- "#E69F00"
perf <- light_performance(fls)
perf
plot(perf, geom = "point") +
labs(x = element_blank(), y = element_blank())
imp <- light_importance(fls, v = x)
plot(imp, fill = fillc, color = "black")
plot(light_profile(fls, v = "VALEUR_DES_BIENS"))
plot(light_profile(fls, v = "NB_PIECES"))
plot(light_profile(fls, v = "TYPE_RESIDENCE"))
# Average predicted versus covariable
plot(light_profile(fls, v = "NB_PIECES", type = "predicted"))
# Average residual versus covariable
plot(light_profile(fls, v = "NB_PIECES", type = "residual")) +
geom_hline(yintercept = 0)
# Average response versus covariable
plot(light_profile(fls, v = "NB_PIECES", type = "response"))
eff_DrivAge <- light_effects(fls, v = "NB_PIECES", counts_weighted = TRUE)
p <- plot(eff_DrivAge, show_points = FALSE)
plot_counts(p, eff_DrivAge, alpha = 0.3)
interact_rel <- light_interaction(
fls_log,
v = most_important(imp, 4),
take_sqrt = FALSE,
pairwise = TRUE,
use_linkinv = TRUE,
seed = 61
)
plot(interact_rel, color = "black", fill = fillc, rotate_x = TRUE)
interact_abs <- light_interaction(
fls_log,
v = most_important(imp, 4),
normalize = FALSE,
pairwise = TRUE,
use_linkinv = TRUE,
seed = 61
)
plot(interact_abs, color = "black", fill = fillc, rotate_x = TRUE)
# Strong interaction
# p <- plot(eff_DrivAge, show_points = FALSE)
# plot_counts(p, eff_DrivAge, alpha = 0.3)
pdp_NBPIECES_REGION <- light_profile(fls_log, v = "NB_PIECES", by = "REGION",
pd_seed = 50, data = df_val, counts_weighted=TRUE)
p <- plot(pdp_NBPIECES_REGION, show_points = FALSE)
pdp_count <- light_effects(fls, v = "NB_PIECES")
plot_counts(p, pdp_count, alpha = 0.3)
pdp_VALEURDESBIENS_REGION <- light_profile(fls_log, v = "VALEUR_DES_BIENS", by = "REGION",
pd_seed = 50, data = df_val, counts_weighted=TRUE)
plot(pdp_VALEURDESBIENS_REGION)
# Weak interaction
pdp_TYPE_RESIDENCE_REGION <- light_profile(fls_log, v = "TYPE_RESIDENCE",
by = "REGION", pd_seed = 50, data = df_val, counts_weighted=TRUE)
plot(pdp_TYPE_RESIDENCE_REGION)
reg_bst_100
test <- h2o.predict(object = reg_bst_100, newdata = as.h2o(df_val))
test
summary(test)
round(sum(test)/sum(df_val$EXPO),4)
round(sum(df_val$NB)/sum(df_val$EXPO),4)
(0.1013432-0.0821)/0.1013432
round(sum(test* df_val$EXPO)/sum(df_val$EXPO),4)
tx <- sum(mrh_train$NB)/sum(mrh_train$EXPO)
print(paste0('taux de sinistre moyen annuel : ', round(tx * 100,2), '%'))

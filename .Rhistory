ref <- data.frame(modeles=c('référence', 'GLM', 'GBM', 'XGB'))
ref$primesmoy = c(sum(dat$NB)/sum(dat$EXPO),
mean(valid_prime_glm),
mean(valid_prime_gbm),
mean(valid_prime_xgb)
)
ref$primesmoy_eq = c(sum(dat$NB)/sum(dat$EXPO),
mean(valid_prime_glm_bc),#/sum(dat$EXPO),
mean(valid_prime_gbm_bc),#/sum(dat$EXPO),
mean(valid_prime_xgb_bc)#/sum(dat$EXPO)
)
ref <- ref%>%
mutate(PctECART = primesmoy/ (sum(dat$NB)/sum(dat$EXPO)) -1,
PctECART_eq = primesmoy_eq/ (sum(dat$NB)/sum(dat$EXPO)) -1
) %>%
mutate(
PctECART = sprintf("%.1f %%", 100*PctECART),
PctECART_eq = sprintf("%.1f %%", 100*PctECART_eq)
) %>%
relocate(modeles, primesmoy, PctECART, primesmoy_eq, PctECART_eq)
ref
ref <- data.frame(modeles=c('référence', 'GLM', 'GBM', 'XGB'))
ref$primesmoy = c(sum(dat$NB)/sum(dat$EXPO),
sum(valid_prime_glm)/sum(dat$EXPO),
sum(valid_prime_gbm)/sum(dat$EXPO),
sum(valid_prime_xgb)/sum(dat$EXPO)
)
ref$primesmoy_eq = c(sum(dat$NB)/sum(dat$EXPO),
sum(valid_prime_glm_bc)/sum(dat$EXPO),
sum(valid_prime_gbm_bc)/sum(dat$EXPO),
sum(valid_prime_xgb_bc)/sum(dat$EXPO)
)
ref <- ref%>%
mutate(PctECART = primesmoy/ (sum(dat$NB)/sum(dat$EXPO)) -1,
PctECART_eq = primesmoy_eq/ (sum(dat$NB)/sum(dat$EXPO)) -1
) %>%
mutate(
PctECART = sprintf("%.1f %%", 100*PctECART),
PctECART_eq = sprintf("%.1f %%", 100*PctECART_eq)
) %>%
relocate(modeles, primesmoy, PctECART, primesmoy_eq, PctECART_eq)
ref
dat <- df_val
ref <- data.frame(modeles=c('référence', 'GLM', 'GBM', 'XGB'))
ref$primesmoy = c(sum(dat$NB)/sum(dat$EXPO),
sum(valid_prime_glm)/sum(dat$EXPO),
sum(valid_prime_gbm)/sum(dat$EXPO),
sum(valid_prime_xgb)/sum(dat$EXPO)
)
ref$primesmoy_eq = c(sum(dat$NB)/sum(dat$EXPO),
sum(valid_prime_glm_bc)/sum(dat$EXPO),
sum(valid_prime_gbm_bc)/sum(dat$EXPO),
sum(valid_prime_xgb_bc)/sum(dat$EXPO)
)
ref <- ref%>%
mutate(PctECART = primesmoy/ (sum(dat$NB)/sum(dat$EXPO)) -1,
PctECART_eq = primesmoy_eq/ (sum(dat$NB)/sum(dat$EXPO)) -1
) %>%
mutate(
PctECART = sprintf("%.1f %%", 100*PctECART),
PctECART_eq = sprintf("%.1f %%", 100*PctECART_eq)
) %>%
relocate(modeles, primesmoy, PctECART, primesmoy_eq, PctECART_eq)
ref
summary(valid_prime_xgb_bc)
p_glm = predict(fit_loc_glm, newdata = valid_prime_glm)
p_gbm = predict(fit_loc_gbm, newdata = valid_prime_gbm)
p_xgb = predict(fit_loc_xgb, newdata = valid_prime_xgb)
valid_prime_glm_bc = p_glm
valid_prime_gbm_bc = p_gbm
valid_prime_xgb_bc = p_xgb
fit_loc_glm_bc = locfit.raw(x=valid_prime_glm_bc,
y=df_val[,"Y"],
weights=df_val[,"EXPO"],
kern="rect",deg=0,alpha=.05)
fit_loc_gbm_bc = locfit.raw(x=valid_prime_gbm_bc,
y=df_val[,"Y"],
weights=df_val[,"EXPO"],
kern="rect",deg=0,alpha=.05)
fit_loc_xgb_bc = locfit.raw(x=valid_prime_xgb_bc,
y=df_val[,"Y"],
weights=df_val[,"EXPO"],
kern="rect",deg=0,alpha=.05)
View(fit_loc_glm)
dat <- df_val
ref <- data.frame(modeles=c('référence', 'GLM', 'GBM', 'XGB'))
ref$primesmoy = c(sum(dat$NB)/sum(dat$EXPO),
sum(valid_prime_glm)/sum(dat$EXPO),
sum(valid_prime_gbm)/sum(dat$EXPO),
sum(valid_prime_xgb)/sum(dat$EXPO)
)
ref$primesmoy_eq = c(sum(dat$NB)/sum(dat$EXPO),
sum(valid_prime_glm_bc)/sum(dat$EXPO),
sum(valid_prime_gbm_bc)/sum(dat$EXPO),
sum(valid_prime_xgb_bc)/sum(dat$EXPO)
)
ref <- ref%>%
mutate(PctECART = primesmoy/ (sum(dat$NB)/sum(dat$EXPO)) -1,
PctECART_eq = primesmoy_eq/ (sum(dat$NB)/sum(dat$EXPO)) -1
) %>%
mutate(
PctECART = sprintf("%.1f %%", 100*PctECART),
PctECART_eq = sprintf("%.1f %%", 100*PctECART_eq)
) %>%
relocate(modeles, primesmoy, PctECART, primesmoy_eq, PctECART_eq)
ref
par(mfrow=c(1,3))
plot(cbind(valid_prime_glm, df_val$Y),lwd=3,col=clrpal4[1],xlim=c(0,.08),xlab="Primes estimées (GLM)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
plot(fit_loc_gbm,lwd=3,col=clrpal4[2],xlim=c(0,.08),xlab="Primes estimées (GBM)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
plot(fit_loc_xgb,lwd=3,col=clrpal4[3],xlim=c(0,.08),xlab="Primes estimées (XGB)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
summary(df_val$Y)
summary(valid_prime_glm)
summary(df_val$Y)
summary(valid_prime_glm/df_val$EXPO)
summary(df_val$Y)
summary(valid_prime_glm*df_val$EXPO)
summary(df_val$Y)
summary(valid_prime_glm/df_val$EXPO)
summary(df_val$Y)
summary(valid_prime_glm)
summary(df_val$NB)
summary(valid_prime_glm)
summary(df_val$NB:df_val$EXPO)
summary(valid_prime_glm)
summary(df_val$NB/df_val$EXPO)
summary(valid_prime_glm)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
if (!require("here")){
install.packages("here")
library("here")
}
set_here
LoadPackage <- function (load.lib=c("")) {
install.lib<-load.lib[!load.lib %in% installed.packages()]
for(lib in install.lib) install.packages(lib,dependencies=TRUE)
sapply(load.lib,require,character=TRUE)
}
LoadPackage(c('ggplot2', 'dplyr', 'formattable', 'DT', 'tidyr', 'caret', 'plotly', 'xgboost', 'flashlight', 'MetricsWeighted', 'corrplot', 'lsr', 'h2o', 'wesanderson', 'locfit'))
plot_obs<-function(df,feature,use_year=T) {
if (use_year) {
dt <-df %>%
group_by(df[[feature]], ANNEE, .drop=FALSE) %>%
summarise(Freq = sum(NB*EXPO)/sum(EXPO), nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  sum(df$EXPO)) %>%
rename(feat = 'df[[feature]]')
} else {
dt <-df %>%
group_by(df[[feature]], .drop=FALSE) %>%
summarise(Freq = sum(NB*EXPO)/sum(EXPO), nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  sum(df$EXPO)) %>%
rename(feat = 'df[[feature]]')
}
fig <-plot_ly()
fig <- fig %>% layout(title = paste0('Fréquence de sinistres par ', feature),
xaxis = list(title = feature),
yaxis = list(side = 'left', title = 'Exposition', showgrid = FALSE, zeroline = FALSE),
yaxis2 = list(side = 'right', overlaying = "y", title = 'Fréquence', showgrid = FALSE, zeroline = FALSE))
if (use_year) {
for (year in unique(dt$ANNEE)) {
dt_temp <- dt %>% filter(ANNEE==year)
fig <- fig %>% add_trace(
x= dt_temp$feat, y= dt_temp$EXPO, type = 'bar', name = paste0('Exposition_', year),
hovertemplate = 'Expo: %{y:.0f}<br>'
)
fig<- fig %>% add_trace(
x= dt_temp$feat, y= dt_temp$Freq, type = 'scatter', mode = 'lines', yaxis = 'y2', name= paste0('Fréquence_', year),
hovertemplate = 'Freq: %{y:.2%}<br>'
)
}
} else {
dt_temp <- dt
fig <- fig %>% add_trace(
x= dt_temp$feat, y= dt_temp$EXPO, type = 'bar', name = 'Exposition',
hovertemplate = 'Expo: %{y:.0f}<br>'
)
fig<- fig %>% add_trace(
x= dt_temp$feat, y= dt_temp$Freq, type = 'scatter', mode = 'lines', yaxis = 'y2', name= 'Fréquence',
hovertemplate = 'Freq: %{y:.2%}<br>'
)
}
return(fig)
}
resume <- function(df, feature) {
dt <-df %>%
group_by(df[[feature]], .drop=FALSE) %>%
summarise(Freq = sum(NB*EXPO)/sum(EXPO), nb_lignes = n(), EXPO=sum(EXPO) ,  pct_EXPO = sum(EXPO) /  sum(df$EXPO ))
colnames(dt)[1] <- feature
table<- formattable(dt,
align = c("l", rep("r", NCOL(dt) - 1)),
list(
Freq = percent,
nb_lignes= accounting,
EXPO = accounting,
pct_EXPO = percent
)
)
fig1<- plot_obs(df, feature, use_year = F)
fig2<- plot_obs(df, feature, use_year = T)
return(list(dt=dt, table=table, fig=fig1, figyr=fig2))
}
list.files(path=here('data', 'raw'))
expo_train = read.table(file = here('data', 'raw', 'expo_train.csv'), header=T, sep=',', dec='.', encoding = 'UTF-8', stringsAsFactors = T)
datatable(head(expo_train))
str(expo_train)
sin_train = read.table(file = here('data', 'raw', 'sin_train.csv'), header=T, sep=';', dec=',', encoding = 'UTF-8', stringsAsFactors = T)
datatable(head(sin_train))
str(sin_train)
dt <-sin_train %>%
group_by(NB) %>%
summarise(nb_lignes = n())
formattable(dt,
align=c('l','r'),
list(
nb_lignes= accounting
)
)
dt %>%
ggplot( aes(x=as.factor(NB), y=nb_lignes, fill=as.factor(NB))) +
geom_bar(stat='identity') +
ggtitle('Distribution NB')+
xlab('NB') +
ylab('nombre de lignes') +
labs(fill = 'NB')
mrh <- expo_train %>%
left_join(sin_train, by =c('id','ANNEE')) %>%
replace_na(list('NB'=0, 'COUT'=0))
set.seed(42)
trainIndex<- createDataPartition(mrh$NB>=0, p=.7, list=FALSE, time=1)
mrh_train<-mrh[trainIndex,]
mrh_test<-mrh[ -trainIndex,]
valIndex<- createDataPartition(mrh_test$NB>=0, p=.66, list=FALSE, time=1)
mrh_val<-mrh_test[ valIndex,]
mrh_test<-mrh_test[ -valIndex,]
tx <- sum(mrh_train$NB)/sum(mrh_train$EXPO)
print(paste0('taux de sinistre moyen annuel : ', round(tx * 100,2), '%'))
df = mrh_train
feature = 'FORMULE'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'TYPE_RESIDENCE'
res<-resume(df, feature)
res$table
res$fig
res$figyr
df = mrh_train
feature = 'TYPE_HABITATION'
res<-resume(df, feature)
res$table
res$fig
res$figyr
preprocess<- function(dt) {
res <- dt %>%
mutate(
Y = NB/EXPO, #calcul de la fréquence pour XGB qui ne supporte pas les offset, mais accepte les poids
NB_PIECES = ifelse(is.na(NB_PIECES), 2, NB_PIECES), #2 est le mode de NB_PIECES
NBSIN_TYPE1_AN1 = ifelse(NBSIN_TYPE1_AN1==0,0,1), #On regroupe les modalités non stables dans le temps
NBSIN_TYPE1_AN3 = ifelse(NBSIN_TYPE1_AN3==0,0,1), #On regroupe les modalités non stables dans le temps
REGION =  gsub('[0-9]', '', ZONIER), #création de région
VALEUR_DES_BIENS = pmin(VALEUR_DES_BIENS, 50000), # On regroupe les valeurs des biens supérieurs à 80k
OFFSET = log(EXPO) # création d'une variable d'offset qui servira pour le gbm
) %>%
mutate( REGION = as.factor(REGION),
VALEUR_DES_BIENS = as.factor(VALEUR_DES_BIENS)
) %>%
select(-c('X', 'TYPE_HABITATION', 'NIVEAU_JURIDIQUE', 'NBSIN_TYPE1_AN2', 'NBSIN_TYPE2_AN1', 'NBSIN_TYPE2_AN2', 'NBSIN_TYPE2_AN3', 'ZONIER'  )) %>% # On supprime les variables sans lien stable dans le temps
relocate('id', 'EXPO', 'FORMULE', 'TYPE_RESIDENCE', 'SITUATION_JURIDIQUE', 'OBJETS_DE_VALEUR', 'VALEUR_DES_BIENS', 'NB_PIECES',  'REGION', 'NBSIN_TYPE1_AN1', 'NBSIN_TYPE1_AN3', 'ANNEE', 'NB', 'Y', 'COUT' )
return(res)
}
df_train <- preprocess(mrh_train)
df_val <- preprocess(mrh_val)
df_test <- preprocess(mrh_test)
X_train <- df_train %>% select(-c('id', 'EXPO', 'NB', 'Y', 'COUT'))
# Initialize empty matrix to store coefficients
empty_m <- matrix(ncol = length(X_train),
nrow = length(X_train),
dimnames = list(names(X_train),
names(X_train)))
# Function that accepts matrix for coefficients and data and returns a correlation matrix
calculate_cramer <- function(m, df) {
for (r in seq(nrow(m))){
for (c in seq(ncol(m))){
m[[r, c]] <- lsr::cramersV(X_train[[r]], X_train[[c]])
}
}
return(m)
}
cor_matrix <- calculate_cramer(empty_m ,X_train)
corrplot(cor_matrix)
summary(df_test$NB)
reg0 = glm(NB~1+offset(OFFSET),family=poisson,data=df_train)
summary(reg0)
fit_glm <- glm(NB ~ FORMULE + TYPE_RESIDENCE + SITUATION_JURIDIQUE + OBJETS_DE_VALEUR + as.factor(VALEUR_DES_BIENS) + as.factor(NB_PIECES) + REGION + as.factor(NBSIN_TYPE1_AN1) + as.factor(NBSIN_TYPE1_AN3) + as.factor(ANNEE),
data=df_train, offset=OFFSET, family=quasipoisson())
summary(fit_glm)
fit_glm <- glm(NB ~ FORMULE + TYPE_RESIDENCE + OBJETS_DE_VALEUR + as.factor(VALEUR_DES_BIENS) + as.factor(NB_PIECES) + REGION + as.factor(NBSIN_TYPE1_AN1) + as.factor(NBSIN_TYPE1_AN3) + as.factor(ANNEE),
data=df_train, offset=OFFSET, family=quasipoisson())
summary(fit_glm)
fit_glm_Diag <- data.frame(df_test,
fit = predict(fit_glm, newdata = df_test, type="response")
) %>%
mutate(pearson = (NB-fit)/sqrt(fit))
dat <- fit_glm_Diag %>%
select( fit, pearson) %>%
mutate(quantile = ntile(fit, 16000)) %>%
group_by(quantile) %>%
summarize(mean_fit = mean(fit, na.rm = TRUE), mean_pearson = mean(pearson, na.rm = TRUE))
ggplot(dat, aes(x = mean_fit, y = mean_pearson)) +
geom_point() +
geom_abline(intercept = 0, slope = 0, size = 1, color="red") +
ggtitle("Rédidus de Pearson aggrégés - test - GLM")
round(sum(fit_glm_Diag$fit)/sum(df_test$EXPO),4)
round(sum(df_test$NB)/sum(df_test$EXPO),4)
fit_glm_Diag %>%
mutate(residual = NB-fit) %>%
summarize(rmse  = sqrt(mean(residual^2)))
summary(df_test$NB)
summary(fit_glm_Diag$fit)
clrpal4 = wes_palette("Darjeeling1")[c(1,2,3,5)]
hist(fit_glm_Diag$fit, breaks = 50, xlim=c(0,.08),col=clrpal4[1],border="white",
main="",xlab="Premium (GLM)",ylab="",ylim=c(0,2000))
h2o.init(nthreads = -1)
h2o.no_progress()
fit_gbm = h2o.gbm(y = 'NB', x = names(df_train)[3:12],
distribution = "poisson",
offset_column = "OFFSET",
stopping_metric = "deviance",
training_frame = as.h2o(df_train),
validation_frame = as.h2o(df_val),
ntrees = 60,
nfolds = 5,
seed = 1)
print(h2o.performance(fit_gbm, newdata = as.h2o(df_val)))
plot(fit_gbm)
x <- c('FORMULE', 'TYPE_RESIDENCE', 'SITUATION_JURIDIQUE','OBJETS_DE_VALEUR', 'VALEUR_DES_BIENS', 'NB_PIECES', 'REGION', 'NBSIN_TYPE1_AN1', 'NBSIN_TYPE1_AN3', 'ANNEE')
y <- 'Y'
w <- 'EXPO'
# Input maker
prep_xgb <- function(dat, x) {
data.matrix(dat[, x, drop = FALSE])
}
# Data interface to XGBoost
dtrain <- xgb.DMatrix(
prep_xgb(df_train, x),
label = df_train[[y]],
weight = df_train[[w]]
)
# Parameters chosen by 5-fold grouped CV
params_freq <- list(
learning_rate = 0.2,
max_depth = 5,
alpha = 3,
lambda = 0.5,
max_delta_step = 2,
min_split_loss = 0,
colsample_bytree = 1,
subsample = 0.9
)
# Fit
set.seed(1)
fit_xgb <- xgb.train(
params_freq,
data = dtrain,
nrounds = 580,
objective = "count:poisson",
watchlist = list(train = dtrain),
print_every_n = 100
)
# Save and load model
xgb.save(fit_xgb, "xgb.model")
fit_xgb <- xgb.load("xgb.model")
fit_xgb_Diag <- data.frame(df_test,
fit = predict(fit_xgb, prep_xgb(df_test, x))
) %>%
mutate(pearson = (NB-fit)/sqrt(fit))
dat_xgb <- fit_xgb_Diag %>%
select( fit, pearson) %>%
mutate(quantile = ntile(fit, 16000)) %>%
group_by(quantile) %>%
summarize(mean_fit = mean(fit, na.rm = TRUE), mean_pearson = mean(pearson, na.rm = TRUE))
ggplot(dat_xgb, aes(x = mean_fit, y = mean_pearson)) +
geom_point() +
geom_abline(intercept = 0, slope = 0, size = 1, color="red") +
ggtitle("Rédidus de Pearson aggrégés - test - XGB")
fl_glm <- flashlight(
model = fit_glm, label = "GLM",
predict_function = function(fit, X) predict(fit, X, type = "response")
)
fl_xgb <- flashlight(
model = fit_xgb, label = "XGBoost",
predict_function = function(fit, X) predict(fit, prep_xgb(X, x))
)
fl_gbm <- flashlight(
model = fit_gbm, label = "H20 GBM",
predict_function = function(fit, X) as.vector(h2o.predict(object = fit_gbm, newdata=as.h2o(X)))
)
# Combine them and add common elements like reference data
metrics <- list(`Average deviance` = deviance_poisson,
`Relative deviance reduction` = r_squared_poisson)
fls <- multiflashlight(list(fl_glm, fl_xgb, fl_gbm), data = df_test,
y = y, w = w, metrics = metrics)
# Version on canonical scale
fls_log <- multiflashlight(fls, linkinv = log)
fillc <- "#E69F00"
perf <- light_performance(fls)
perf
plot(perf, geom = "point") +
labs(x = element_blank(), y = element_blank())
dat = df_val
ref <- data.frame(modeles=c('référence', 'GLM', 'GBM', 'XGB'))
ref$primesmoy = c(sum(dat$NB)/sum(dat$EXPO),
sum(fl_glm$predict_function(fit_glm, dat))/sum(dat$EXPO),
sum(fl_gbm$predict_function(fit_gbm, dat))/sum(dat$EXPO),
sum(fl_xgb$predict_function(fit_xgb, dat))/sum(dat$EXPO)
)
ref <- ref%>%
mutate(PctECART = primesmoy/ (sum(dat$NB)/sum(dat$EXPO)) -1 ) %>%
mutate(PctECART = sprintf("%.1f %%", 100*PctECART) )
ref
dat = df_test
valid_prime_glm = fl_glm$predict_function(fit_glm, dat)
valid_prime_gbm = fl_gbm$predict_function(fit_gbm, dat)
valid_prime_xgb = fl_xgb$predict_function(fit_xgb, dat)
par(mfrow=c(1,3))
hist(valid_prime_glm, breaks = 100,xlim=c(0,.08),col=clrpal4[1],border="white",
main="",xlab="Primes estimées (GLM)",ylab="",ylim=c(0,3000))
hist(valid_prime_gbm, breaks = 100,xlim=c(0,.08),col=clrpal4[2],border="white",
main="",xlab="Primes estimées (GBM)",ylab="",ylim=c(0,3000))
hist(valid_prime_xgb, breaks = 100,xlim=c(0,.08),col=clrpal4[3],border="white",
main="",xlab="Primes estimées (XGB)",ylab="",ylim=c(0,3000))
dat = df_val
valid_prime_glm = fl_glm$predict_function(fit_glm, dat)
valid_prime_gbm = fl_gbm$predict_function(fit_gbm, dat)
valid_prime_xgb = fl_xgb$predict_function(fit_xgb, dat)
fit_loc_glm = locfit.raw(x=valid_prime_glm,
y=df_val[,"Y"],
weights=df_val[,"EXPO"],
kern="rect",deg=0,alpha=.05)
fit_loc_gbm = locfit.raw(x=valid_prime_gbm,
y=df_val[,"Y"],
weights=df_val[,"EXPO"],
kern="rect",deg=0,alpha=.05)
fit_loc_xgb = locfit.raw(x=valid_prime_xgb,
y=df_val[,"Y"],
weights=df_val[,"EXPO"],
kern="rect",deg=0,alpha=.05)
par(mfrow=c(1,3))
plot(cbind(valid_prime_glm, df_val$Y),lwd=3,col=clrpal4[1],xlim=c(0,.08),xlab="Primes estimées (GLM)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
plot(fit_loc_gbm,lwd=3,col=clrpal4[2],xlim=c(0,.08),xlab="Primes estimées (GBM)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
plot(fit_loc_xgb,lwd=3,col=clrpal4[3],xlim=c(0,.08),xlab="Primes estimées (XGB)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
par(mfrow=c(1,3))
plot(x=valid_prime_glm, y=df_val$Y,lwd=3,col=clrpal4[1],xlim=c(0,.08),xlab="Primes estimées (GLM)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
plot(fit_loc_gbm,lwd=3,col=clrpal4[2],xlim=c(0,.08),xlab="Primes estimées (GBM)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
plot(fit_loc_xgb,lwd=3,col=clrpal4[3],xlim=c(0,.08),xlab="Primes estimées (XGB)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
summary(df_val$NB/df_val$EXPO)
summary(df_val$Y)
summary(valid_prime_glm)
par(mfrow=c(1,3))
plot(fit_loc_glm,lwd=3,col=clrpal4[1],xlim=c(0,.08),xlab="Primes estimées (GLM)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
plot(fit_loc_gbm,lwd=3,col=clrpal4[2],xlim=c(0,.08),xlab="Primes estimées (GBM)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
plot(fit_loc_xgb,lwd=3,col=clrpal4[3],xlim=c(0,.08),xlab="Primes estimées (XGB)",ylab="",ylim=c(0,.08))
abline(a=0,b=1,lwd=.4)
dat <- dataframe()
dat <- dataframe
dat <- data.frame()
dat$X = valid_prime_glm
dat <- data.frame(X = valid_prime_glm, Y = df_val$Y)
ggplot(data = dat) +
aes(x=X, y=Y) +
geom_point()
dat <- data.frame(X = valid_prime_glm, Y = df_val$Y)
ggplot(data = dat) +
aes(x=X, y=Y) +
geom_point() +
ylim(0, 0.125)
knitr::opts_chunk$set(echo = TRUE)
library("wesanderson")
library(scales)
clrpal = wes_palette("Zissou1", 22, type = "continuous")
clrpallow = scales::alpha(clrpal,.4)
bleurouge = clrpal[c(1,22)]
bleurougepal = clrpallow[c(1,22)]
clrpal4 = colr =  wes_palette("Darjeeling1")[c(1,2,3,5)]
clrpal6 = wes_palette("Zissou1", 6, type = "continuous")
library(CASdatasets)
install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/", type="source")
install.packages("xts")
install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/", type="source")
install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/", type="source")
library(CASdatasets)
install.packages("CASdatasets", repos = "http://cas.uqam.ca/pub/", type="source")
knitr::opts_chunk$set(echo = TRUE)
library("wesanderson")
library(scales)
clrpal = wes_palette("Zissou1", 22, type = "continuous")
clrpallow = scales::alpha(clrpal,.4)
bleurouge = clrpal[c(1,22)]
bleurougepal = clrpallow[c(1,22)]
clrpal4 = colr =  wes_palette("Darjeeling1")[c(1,2,3,5)]
clrpal6 = wes_palette("Zissou1", 6, type = "continuous")
library(CASdatasets)
